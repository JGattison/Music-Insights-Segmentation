ggplot(study_data, aes(x = Date, y = danceability)) +
geom_point() +
labs(title = "Release Date per day", x = "Date", y = "Original Release Date") +
theme_minimal()
ggplot(data, aes(x = wt, y = mpg)) +  # Set x and y variables
geom_point() +  # Add scatterplot points
labs(title = "Scatterplot of Weight vs MPG", x = "Weight (1000 lbs)", y = "Miles per Gallon") +
theme_minimal()  # Use a clean theme
ggplot(mtcars, aes(x = wt, y = mpg)) +  # Set x and y variables
geom_point() +  # Add scatterplot points
labs(title = "Scatterplot of Weight vs MPG", x = "Weight (1000 lbs)", y = "Miles per Gallon") +
theme_minimal()  # Use a clean theme
ggplot(study_data, aes(x = Date, y = danceability)) +
geom_point() +
labs(title = "Danceability per day", x = "Date", y = "Danceability") +
theme_minimal()
colnames(study_data)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Streams = sum(Streams),
Avg_Streams = mean(Streams),
explicit = weighted.mean(explicit, Streams))
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Streams = sum(Streams),
Avg_Streams = mean(Streams),
explicit = sum(explicit * Streams) / sum(Streams))
View(daily_data)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE))
View(daily_data)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = sum(danceability * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE))
View(daily_data)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = avg(danceability))
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = mean(danceability))
View(daily_data)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = sum(danceability * Streams, na.rm = TRUE))
View(daily_data)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = sum(danceability * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE))
daily_data <- study_data %>%
group_by(Date) %>%
summarise(Songs = count(Title),
Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = sum(danceability * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE))
daily_data <- study_data %>%
group_by(Date) %>%
summarise(count = n(),
Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = sum(danceability * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE))
View(daily_data)
test <- study_data[Date == '2021-10-01']
study_data$Date == '2021-10-01'
test <- study_data[study_data$Date == '2021-10-01']
test <- study_data[which(study_data$Date == '2021-10-01'),]
View(test)
sum(test$Streams)
mean(test$Streams)
test <- test %>%
mutate(danceability_streams = danceability * Streams)
View(test)
test$danceability_streams / sum(test$Streams)
sum(test$danceability_streams) / sum(test$Streams)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(count = n(),
Total_Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = sum(danceability * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE))
View(daily_data)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(count = n(),
Total_Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = sum(danceability * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_acousticness = sum(acousticness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_duration = sum(duration * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_energy = sum(energy * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_instrumentalness = sum(instrumentalness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_key = sum(key * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_liveness = sum(liveness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_loudness = sum(loudness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_mode = sum(mode * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_speechiness = sum(speechiness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_tempo = sum(tempo * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_time_signature = sum(time_signature * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_valence = sum(valence * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE))
View(daily_data)
daily_data <- study_data %>%
group_by(Date) %>%
summarise(count = n(),
Total_Streams = sum(Streams, na.rm = TRUE),
Avg_Streams = mean(Streams, na.rm = TRUE),
explicit = sum(explicit * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_danceability = sum(danceability * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_acousticness = sum(acousticness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_duration = sum(duration * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_energy = sum(energy * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_instrumentalness = sum(instrumentalness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_key = sum(key * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_liveness = sum(liveness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_loudness = sum(loudness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_mode = sum(as.numeric(mode) * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_speechiness = sum(speechiness * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_tempo = sum(tempo * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_time_signature = sum(time_signature * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE),
avg_valence = sum(valence * Streams, na.rm = TRUE) / sum(Streams, na.rm = TRUE))
ggplot(daily_data, aes(x = Date, y = danceability)) +
geom_line() +
labs(title = "Avg Danceability per day (Weighted)", x = "Date", y = "Danceability") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = Total_Streams)) +
geom_line() +
labs(title = "Avg Danceability per day (Weighted)", x = "Date", y = "Danceability") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = Avg_Streams)) +
geom_line() +
labs(title = "Avg Danceability per day (Weighted)", x = "Date", y = "Danceability") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = danceability)) +
geom_line() +
labs(title = "Avg Danceability per day (Weighted)", x = "Date", y = "Danceability") +
theme_minimal()
var(study_data$danceability)
var(study_data$danceability, na.rm = TRUE)
sqrt(var(study_data$danceability, na.rm = TRUE))
ggplot(daily_data, aes(x = Date, y = Total_Streams)) +
geom_line() +
labs(title = "Total Streams per Day", x = "Date", y = "Total Streams") +
theme_minimal()
ggplot(study_data, aes(x = Streams, y = danceability)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Danceability vs Streams", x = "Streams", y = "Danceability")
ggplot(study_data, aes(x = danceability, y = Streams)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Danceability vs Streams", x = "Streams", y = "Danceability")
ggplot(study_data, aes(x = danceability, y = Streams)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Danceability vs Streams", x = "Danceability", y = "Streams")
ggplot(study_data, aes(x = Streams, y = danceability)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Danceability vs Streams", x = "Streams", y = "Danceability")
ggplot(daily_data, aes(x = Date, y = Avg_Streams)) +
geom_line() +
labs(title = "Total Streams per Day", x = "Date", y = "Total Streams") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_danceability)) +
geom_line() +
labs(title = "Avg Danceability per day (Weighted)", x = "Date", y = "Danceability") +
theme_minimal()
colnames(daily_data)
ggplot(daily_data, aes(x = Date, y = avg_acousticness)) +
geom_line() +
labs(title = "Avg acousticness per day (Weighted)", x = "Date", y = "acousticness") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_duration)) +
geom_line() +
labs(title = "Avg duration per day (Weighted)", x = "Date", y = "duration") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_energy)) +
geom_line() +
labs(title = "Avg energy per day (Weighted)", x = "Date", y = "energy") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_instrumentalness)) +
geom_line() +
labs(title = "Avg instrumentalness per day (Weighted)", x = "Date", y = "instrumentalness") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_key)) +
geom_line() +
labs(title = "Avg key per day (Weighted)", x = "Date", y = "key") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_duration)) +
geom_line() +
labs(title = "Avg duration per day (Weighted)", x = "Date", y = "duration") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_key)) +
geom_line() +
labs(title = "Avg key per day (Weighted)", x = "Date", y = "key") +
theme_minimal()
# Histogram for Key
ggplot(study_data, aes(x = key)) +
geom_histogram(binwidth = 1, color = 'black', fill = 'skyblue') +
labs(title = "Key Distribution", x = 'Key', y = 'Count') +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_key)) +
geom_line() +
labs(title = "Avg key per day (Weighted)", x = "Date", y = "key") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_liveness)) +
geom_line() +
labs(title = "Avg liveness per day (Weighted)", x = "Date", y = "liveness") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_loudness)) +
geom_line() +
labs(title = "Avg loudness per day (Weighted)", x = "Date", y = "loudness") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_mode)) +
geom_line() +
labs(title = "Avg mode per day (Weighted)", x = "Date", y = "mode") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_speechiness)) +
geom_line() +
labs(title = "Avg speechiness per day (Weighted)", x = "Date", y = "speechiness") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_tempo)) +
geom_line() +
labs(title = "Avg tempo per day (Weighted)", x = "Date", y = "tempo") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_time_signature)) +
geom_line() +
labs(title = "Avg time_signature per day (Weighted)", x = "Date", y = "time_signature") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = avg_valence)) +
geom_line() +
labs(title = "Avg valence per day (Weighted)", x = "Date", y = "valence") +
theme_minimal()
ggplot(daily_data, aes(x = Date, y = explicit)) +
geom_line() +
labs(title = "Avg Explicitness per day (Weighted)", x = "Date", y = "Explicitness") +
theme_minimal()
library(timetk)
install.packages('timetk')
library(timetk)
#From timetk package
study_data %>%
plot_time_series(Date, avg_danceability, .interactive = TRUE, .smooth = TRUE)
#From timetk package
daily_data %>%
plot_time_series(Date, avg_danceability, .interactive = TRUE, .smooth = TRUE)
#From timetk package
daily_data %>%
plot_time_series(Date, avg_danceability, .interactive = TRUE, .smooth = FALSE)
#From timetk package
daily_data %>%
plot_time_series(Date, avg_danceability, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_acousticness, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_duration, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_energy, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_instrumentalness, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_key, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_liveness, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_loudness, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_mode, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_speechiness, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_tempo, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_time_signature, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, avg_valence, .interactive = TRUE, .smooth = TRUE)
daily_data %>%
plot_time_series(Date, explicit, .interactive = TRUE, .smooth = TRUE)
df <- daily_data %>%
rename(ds= Date,
y = avg_danceability)
View(df)
# Model fit
danceability_model <- prophet(df, seasonality.mode = 'additive')
?prophet
??prophet
install.packages('prophet')
library(prophet)
# Model fit
danceability_model <- prophet(df, seasonality.mode = 'additive')
#fit model on historical data
danceability_forecast <- predict(danceability_model)
#Show components plot
prophet_plot_components(danceability_model, danceability_forecast)
df <- daily_data %>%
rename(Date= Date,
y = avg_danceability)
# Model fit
danceability_model <- prophet(df, seasonality.mode = 'additive')
df <- daily_data %>%
rename(ds= Date,
y = avg_danceability)
danceability_model <- add_seasonality(danceability_model, name='monthly', period=30.5, fourier.order=5)
# Model fit
danceability_model <- prophet()
danceability_model <- add_seasonality(danceability_model, name='monthly', period=30.5, fourier.order=5)
danceability_model <- prophet(df, seasonality.mode = 'additive')
#fit model on historical data
danceability_forecast <- predict(danceability_model)
#Show components plot
prophet_plot_components(danceability_model, danceability_forecast)
# Fit the model on the historical data
danceability_model <- fit.prophet(danceability_model, daily_data)
# Model fit
danceability_model <- prophet()
danceability_model <- add_seasonality(danceability_model, name='monthly', period=30.5, fourier.order=5)
danceability_model <- prophet(df, seasonality.mode = 'additive')
# Fit the model on the historical data
danceability_model <- fit.prophet(danceability_model, daily_data)
# Instantiate the Prophet model
danceability_model <- prophet(seasonality.mode = 'additive')
# Add monthly seasonality
danceability_model <- add_seasonality(danceability_model, name = 'monthly', period = 30.5, fourier.order = 5)
# Fit the model on the historical data
danceability_model <- fit.prophet(danceability_model, daily_data)
# Instantiate the Prophet model
danceability_model <- prophet(seasonality.mode = 'additive')
# Add monthly seasonality
danceability_model <- add_seasonality(danceability_model, name = 'monthly', period = 30.5, fourier.order = 5)
# Fit the model on the historical data
danceability_model <- fit.prophet(danceability_model, df)
# Generate forecast using the fitted model
danceability_forecast <- predict(danceability_model)
#Show components plot
prophet_plot_components(danceability_model, danceability_forecast)
# acousticness
df <- daily_data %>%
rename(ds= Date,
y = avg_acousticness)
# Instantiate the Prophet model
acousticness_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
acousticness_model <- fit.prophet(acousticness_model, df)
# Generate forecast using the fitted model
acousticness_forecast <- predict(acousticness_model)
#Show components plot
prophet_plot_components(acousticness_model, acousticness_forecast)
# duration
df <- daily_data %>%
rename(ds= Date,
y = avg_duration)
# Instantiate the Prophet model
duration_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
duration_model <- fit.prophet(duration_model, df)
# Generate forecast using the fitted model
duration_forecast <- predict(duration_model)
#Show components plot
prophet_plot_components(duration_model, duration_forecast)
# energy
df <- daily_data %>%
rename(ds= Date,
y = avg_energy)
# Instantiate the Prophet model
energy_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
energy_model <- fit.prophet(energy_model, df)
# Generate forecast using the fitted model
energy_forecast <- predict(energy_model)
#Show components plot
prophet_plot_components(energy_model, energy_forecast)
# instrumentalness
df <- daily_data %>%
rename(ds= Date,
y = avg_instrumentalness)
# Instantiate the Prophet model
instrumentalness_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
instrumentalness_model <- fit.prophet(instrumentalness_model, df)
# Generate forecast using the fitted model
instrumentalness_forecast <- predict(instrumentalness_model)
#Show components plot
prophet_plot_components(instrumentalness_model, instrumentalness_forecast)
# key
df <- daily_data %>%
rename(ds= Date,
y = avg_key)
# Instantiate the Prophet model
key_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
key_model <- fit.prophet(key_model, df)
# Generate forecast using the fitted model
key_forecast <- predict(key_model)
#Show components plot
prophet_plot_components(key_model, key_forecast)
# liveness
df <- daily_data %>%
rename(ds= Date,
y = avg_liveness)
# Instantiate the Prophet model
liveness_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
liveness_model <- fit.prophet(liveness_model, df)
# Generate forecast using the fitted model
liveness_forecast <- predict(liveness_model)
#Show components plot
prophet_plot_components(liveness_model, liveness_forecast)
# loudness
df <- daily_data %>%
rename(ds= Date,
y = avg_loudness)
# Instantiate the Prophet model
loudness_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
loudness_model <- fit.prophet(loudness_model, df)
# Generate forecast using the fitted model
loudness_forecast <- predict(loudness_model)
#Show components plot
prophet_plot_components(loudness_model, loudness_forecast)
# mode
df <- daily_data %>%
rename(ds= Date,
y = avg_mode)
# Instantiate the Prophet model
mode_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
mode_model <- fit.prophet(mode_model, df)
# Generate forecast using the fitted model
mode_forecast <- predict(mode_model)
#Show components plot
prophet_plot_components(mode_model, mode_forecast)
# speechiness
df <- daily_data %>%
rename(ds= Date,
y = avg_speechiness)
# Instantiate the Prophet model
speechiness_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
speechiness_model <- fit.prophet(speechiness_model, df)
# Generate forecast using the fitted model
speechiness_forecast <- predict(speechiness_model)
#Show components plot
prophet_plot_components(speechiness_model, speechiness_forecast)
# tempo
df <- daily_data %>%
rename(ds= Date,
y = avg_tempo)
# Instantiate the Prophet model
tempo_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
tempo_model <- fit.prophet(tempo_model, df)
# Generate forecast using the fitted model
tempo_forecast <- predict(tempo_model)
#Show components plot
prophet_plot_components(tempo_model, tempo_forecast)
# time_signature
df <- daily_data %>%
rename(ds= Date,
y = avg_time_signature)
# Instantiate the Prophet model
time_signature_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
time_signature_model <- fit.prophet(time_signature_model, df)
# Generate forecast using the fitted model
time_signature_forecast <- predict(time_signature_model)
#Show components plot
prophet_plot_components(time_signature_model, time_signature_forecast)
# valence
df <- daily_data %>%
rename(ds= Date,
y = avg_valence)
# Instantiate the Prophet model
valence_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
valence_model <- fit.prophet(valence_model, df)
# Generate forecast using the fitted model
valence_forecast <- predict(valence_model)
#Show components plot
prophet_plot_components(valence_model, valence_forecast)
# explicitness
df <- daily_data %>%
rename(ds= Date,
y = explicit)
# Instantiate the Prophet model
explicit_model <- prophet(seasonality.mode = 'additive')
# Fit the model on the historical data
explicit_model <- fit.prophet(explicit_model, df)
# Generate forecast using the fitted model
explicit_forecast <- predict(explicit_model)
#Show components plot
prophet_plot_components(explicit_model, explicit_forecast)
